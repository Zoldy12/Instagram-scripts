import time
import random
from playwright.sync_api import sync_playwright

def navigate(page, username):
    max_attempts = 3
    
    for attempt in range(max_attempts):
        try:
            print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ @{username}")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            try:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
                page.keyboard.press("Escape")
                time.sleep(1)
            except:
                pass
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
            page.goto(f"https://www.instagram.com/{username}/", 
                     wait_until="domcontentloaded",  # –ú–µ–Ω—å—à–µ –∂–¥–µ–º
                     timeout=15000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            current_url = page.url
            expected_url = f"https://www.instagram.com/{username}/"
            
            if expected_url in current_url:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ @{username}")
                return True
            else:
                print(f"‚ö†Ô∏è –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞: {current_url}")
                
                # –ï—Å–ª–∏ –Ω–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª–æ, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                time.sleep(2)
                continue
                
        except Exception as e:
            error_msg = str(e)
            if "interrupted" in error_msg.lower() or "navigation" in error_msg.lower():
                print(f"üîÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
                time.sleep(2)
                continue
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞: {error_msg}")
                return False
    
    print(f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ @{username} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
    return False



def parc(page, bloger: str, max_follows: int):
        followed_usernames = []
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
            try:
                navigate(page, bloger)
            except Exception as e:
                print(e)
            print(f'‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page.title()} –æ—Ç–∫—Ä—ã—Ç–∞')
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è
            page.wait_for_selector("header section", timeout=10000)
            
            print("‚åõ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏...")
            try:
                sb_button = page.locator('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), button:has-text("Follow")').first
                sb_button.click()
                print(f"üìç –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–ª–æ–≥–µ—Ä–∞ @{bloger}")
            except Exception as e:
                print("üìç –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–ª–æ–≥–µ—Ä–∞ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞")
                
            # –ù–∞—Ö–æ–¥–∏–º –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            try:
                followers_link = page.locator("a[href*='followers']").first
                followers_link.click()
                print("‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏")
            except:
                page.click("a:has-text('–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤')")
                print("‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
            page.wait_for_selector('div[role="dialog"]', timeout=10000)
            print("‚úÖ –û–∫–Ω–æ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            time.sleep(1)
            
            follow_count = 0
            max_follows = max_follows  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫
            scroll_attempts = 0
            max_scroll_attempts = 999 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç—Ä–æ —Å–∫—Ä–æ–ª–æ–≤ –Ω–∞ 1 –±–ª–æ–≥–µ—Ä–∞
            
            while follow_count < max_follows and scroll_attempts < max_scroll_attempts:
                # –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å username
                follow_buttons = page.locator('button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), button:has-text("Follow")')
                button_count = follow_buttons.count()
                
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è': {button_count}")
                
                # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º username
                for i in range(button_count):
                    if follow_count >= max_follows:
                        break
                        
                    try:
                        button = follow_buttons.nth(i)
                        
                        if button.is_visible():
                            # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                            user_container = button.locator("xpath=./ancestor::div[contains(@class, 'x1dm5mii') or contains(@class, 'x1iyjqo2')][1]")
                            
                            # –ò—â–µ–º username –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                            username_element = user_container.locator("a[href*='/'] span").first
                            username = username_element.text_content().strip() if username_element else f"user_{follow_count + 1}"
                            
                            # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
                            if username not in followed_usernames:
                                button.click()
                                follow_count += 1
                                
                                followed_usernames.append(username)
                                print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ #{follow_count} –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}")
                            
                            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (—Ç–∏–ø–æ —è –Ω–µ –±–æ—Ç, –∞ —á–µ–ª–æ–≤–µ–∫)
                            time.sleep(random.uniform(0.5, 1))
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
                        continue
                
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö
                try:
                    page.keyboard.press("PageDown", delay=200)
                    scroll_attempts += 1
                    print(f"üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ #{scroll_attempts} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (—Ç–∏–ø–æ –Ω–µ –±–æ—Ç)
                    time.sleep(random.uniform(0.3, 0.5))
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ: {e}")
                    break
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
            try:
                close_button = page.locator('svg[aria-label="–ó–∞–∫—Ä—ã—Ç—å"], svg[aria-label="Close"]').first
                close_button.click()
                print("‚úÖ –û–∫–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞–∫—Ä—ã—Ç–æ")
            except:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ")
            
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            
        return followed_usernames




def main(all_data):
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    followed_usernames = []
    
    with sync_playwright() as pl:
        browser = pl.chromium.launch(headless=False)
        page = browser.new_page()
        page.set_default_timeout(10000)
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
            page.goto(f"https://www.instagram.com/zoldy_12/", wait_until='load')
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º cookies
            cookie_selectors = [
                "button._a9--._a9_1",
                "button[type='button']:has-text('–†–∞–∑—Ä–µ—à–∏—Ç—å')",
                "button:has-text('–†–∞–∑—Ä–µ—à–∏—Ç—å')",
                "button:has-text('Allow All')",
                "button:has-text('Accept All')",
                "button._a9--",
                "//button[contains(text(), '–†–∞–∑—Ä–µ—à–∏—Ç—å')]",
                "//button[contains(text(), 'Allow')]",
                "//button[contains(text(), 'Accept')]"
            ]
            
            cookie_accepted = False
            for selector in cookie_selectors:
                try:
                    page.wait_for_selector(selector, timeout=5000)
                    page.click(selector)
                    print(f"‚úÖ Cookies –ø—Ä–∏–Ω—è—Ç—ã —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                    cookie_accepted = True
                    break
                except:
                    continue
                
                
            signin_selectors = [
                "a[role='link']:has-text('–í–æ–π—Ç–∏')",
            ]
            
            for selector in signin_selectors:
                button = page.locator(selector).first      
                button.click()
                print("‚úÖ –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏'")
                
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            
        entery_check = input('–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –∏ –Ω–∞–∂–º–∏ Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞')
        start_time = round(time.time())
        
        for data in all_data:
            followed_usernames.append(parc(page, data[0], int(data[1])))
            time.sleep(1)
        
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        cnt = 0
        for users in followed_usernames:
            for user in users:
                cnt+=1
        print("\n" + "="*50)
        print("üìä –û–¢–ß–ï–¢ –û –ü–û–î–ü–ò–°–ö–ê–•")
        print("="*50)
        print(f"–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {cnt}")
        print("\n–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫:")
        print("-" * 20)
        
        for i, usernames in enumerate(followed_usernames, 1):
            print(f"{i:2d})")
            for g, username in enumerate(usernames, 1):
                print(f"  {g:2d}. {username}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        try:
            with open("followed_users.txt", "a", encoding="utf-8") as f:
                for usernames in followed_usernames:
                    for username in usernames:
                        f.write(f"{username}\n")
            print(f"\nüíæ –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: followed_users.txt")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ñ–∞–π–ª: {e}")
        
        #–†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        end_time = round(time.time())
        hours = (end_time - start_time) // 3600
        minutes = ((end_time - start_time) - hours * 3600) // 60
        seconds = (end_time - start_time) - hours * 3600 - minutes * 60
        if hours:
            total_time = f"{hours}—á. {minutes}–º–∏–Ω. {seconds}—Å."
        elif minutes:
            total_time = f"{minutes}–º–∏–Ω. {seconds}—Å."
        else:
            total_time = f"{seconds}—Å."
        print(f"‚åö –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã: {total_time}")
        
        # –ü–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        _ = input('–ù–∞–∂–º–∏ Enter, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.')
        
        browser.close()
    
    return followed_usernames

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
if __name__ == '__main__':
    with open("blogers.txt", "r", encoding="utf-8") as file:
        all_data = []
        for stroka in file:
            stroka = stroka[:-1]
            data = stroka.split(' ')
            if stroka == 'en':
                break
            all_data.append(data)
    main(all_data)
    